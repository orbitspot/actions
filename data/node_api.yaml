module: <GRAFANA-TAG>

nodeSelector:
    nodegroup-type: ${.mail-attachment-service.consumer.node_selector}

csiSecrets:
    enabled: true
    serviceAccountName: "application-permission"

keda:
    scale:
        spec:
            cooldownPeriod: 300
            maxReplicaCount: ${.<REPOSITORY-NAME>.<DEPLOYMENT-NAME>.keda.maxReplicaCount}
            minReplicaCount: ${.<REPOSITORY-NAME>.<DEPLOYMENT-NAME>.keda.minReplicaCount}
            scaleTargetRef:
                name: api
            triggers:
                - type: cpu
                  metricType: Utilization
                  metadata:
                      value: '90'

istio:
    enable: true
    egress:
        serviceEntries:
            - ports:
                  - number: ${.<REPOSITORY-NAME>.istio.egress.databases.default.port}
                    name: tcp
                    protocol: TCP
              hosts:
                  - ${.<REPOSITORY-NAME>.istio.egress.databases.default.host}
        virtualService:
            hosts:
                - ${.<REPOSITORY-NAME>.istio.ingress.host}
            gateways:
                - 'istio-system/orbit-egress'
            tcp:
                - match:
                      - gateways:
                        - 'istio-system/orbit-egress'
                        port: ${.<REPOSITORY-NAME>.istio.egress.databases.default.port}
                  route:
                      - destination:
                            host: istio-egressgateway.istio-system.svc.cluster.local
                            subset: postgres
                            port:
                                number: ${.<REPOSITORY-NAME>.istio.egress.databases.default.port}
                      - destination:
                            host: ${.<REPOSITORY-NAME>.istio.egress.databases.default.host}
                            port:
                                number: ${.<REPOSITORY-NAME>.istio.egress.databases.default.port}
                        weight: 100
    ingress:
        virtualService:
            hosts:
                - ${.<REPOSITORY-NAME>.istio.ingress.host}
                - 'api.<REPOSITORY-NAME>.svc.cluster.local'
            gateways:
                - 'istio-system/orbit-ingress'
            http:
                - match:
                      - uri:
                            prefix: '/<REPOSITORY-NAME>/'
                  rewrite:
                      uri: '/'
                  route:
                      - destination:
                            host: api
                            port:
                                number: 80

service:
    type: ClusterIP

containers:
    - name: api
      repository:
          image: 931670397156.dkr.ecr.${region}.amazonaws.com/api-<REPOSITORY-NAME>
          tag: latest
      ports:
          - targetPort: 3000
            port: 80
            protocol: TCP
      resources:
          requests:
              cpu: ${.<REPOSITORY-NAME>.<DEPLOYMENT-NAME>.resources.requests.cpu}
              memory: ${.<REPOSITORY-NAME>.<DEPLOYMENT-NAME>.resources.requests.memory}
          limits:
              cpu: ${.<REPOSITORY-NAME>.<DEPLOYMENT-NAME>.resources.limits.cpu}
              memory: ${.<REPOSITORY-NAME>.<DEPLOYMENT-NAME>.resources.limits.memory}
      livenessProbe:
          httpGet:
              path: /health
              port: 3000
          successThreshold: 1
          failureThreshold: 5
          initialDelaySeconds: 25
          periodSeconds: 80
          timeoutSeconds: 10
      readinessProbe:
          httpGet:
              path: /health
              port: 3000
          successThreshold: 1
          failureThreshold: 15
          initialDelaySeconds: 10
          periodSeconds: 80