name: Cron Job

on:
  workflow_call:
    inputs:
      module:
        required: true
        type: string
      grafana_tag: # vai desaparecer
        required: true
        type: string
      version:
        required: true
        type: string
      scheduler:
        required: true
        type: string
      dockerfile_path:
        required: false
        type: string
        default: ''

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

env: # global env
  AWS_ROLE_NAME: ${{ vars.AWS_ROLE_NAME }}
  AWS_REGION: ${{ vars._AWS_REGION }}

jobs:
  setup-config:
    name: Set up pipeline config  
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      CLUSTER_REGION: '${{ steps.set-output.outputs.CLUSTER_REGION }}'
      CLUSTER_NAME: '${{ steps.set-output.outputs.CLUSTER_NAME }}'
      ACM_ARN: '${{ steps.set-output.outputs.ACM_ARN }}'
      ENV: '${{ steps.set-output.outputs.ENV }}'
    steps:
      - name: Set up
        id: set-output
        uses:  orbitspot/actions/.github/actions/setup-config@separando-properties
        with:
          setup: 'cronjob'
          repo_vars: '${{ toJson(vars) }}'
          devops_config: '${{ vars._DEVOPS_CONFIG }}'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Setup matrix
        id: set-matrix
        shell: bash
        run: |
          set -e

          PROJECT_ROOT=$(git rev-parse --show-toplevel)
          SCRIPT_DIR="$PROJECT_ROOT/.github/scripts"

          scripts=($(find "$SCRIPT_DIR" -maxdepth 1 -type f -name "*.sh" -exec basename {} .sh \;))

          # ConstrÃ³i JSON da matriz em formato compacto
          matrix=$(printf '%s\n' "${scripts[@]}" | jq -R . | jq -cs 'map(select(contains("cronjob")))')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
        
  building:
    name: Building
    runs-on: [ '${{ github.ref_name }}', 4unity, linux, self-hosted, x64]
    needs: [setup-config]
    permissions:
      id-token: write
      contents: read
    env:
      AWS_ACCOUNT_NUMBER: ${{ vars.AWS_ACCOUNT_NUMBER }}
    steps:
      - name: Building
        uses: orbitspot/actions/.github/actions/package-manager-install@separando-properties
        with:
          node_version: '${{ inputs.version }}'
          customized_dockerfile: '${{ inputs.dockerfile_path  }}'

  generate-docker:
    name: Docker Build
    runs-on: [ '${{ github.ref_name }}', '4unity', linux, self-hosted, x64]
    environment: ${{ github.ref_name }}
    needs: [building, setup-config]
    strategy:
      matrix:
        artifacts: ${{ fromJson(needs.setup-config.outputs.matrix) }}
    permissions:
      id-token: write
      contents: read      
    env:
      CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
      AWS_ACCOUNT_NUMBER: ${{ vars.AWS_ACCOUNT_NUMBER }}
    steps:
      - name: Authenticate
        uses: orbitspot/actions/.github/actions/generate-docker@separando-properties
        with:
          dockerfile_path: ${{ inputs.dockerfile_path }}
          version: ${{ inputs.version }}
          build_args: '--build-arg sha=${{ github.sha }} --build-arg RUNNER=${{ matrix.artifacts }}'
          before_building: |
            cat base_script.sh scripts/${{ matrix.artifacts }}.sh > ${{ matrix.artifacts }}.sh
            cat ${{ matrix.artifacts }}.sh

  create-service-account-role:
    name: Creating Aws Resources
    runs-on: [ '${{ github.ref_name }}', '4unity', linux, self-hosted, x64]
    environment: ${{ github.ref_name }}
    needs: [generate-docker, setup-config]
    permissions:
        id-token: write
        contents: read
    env:
      CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
      CLUSTER_NAME: '${{ needs.setup-config.outputs.CLUSTER_NAME }}'
      ENV: '${{ needs.setup-config.outputs.ENV }}'
      AWS_ACCOUNT_NUMBER: ${{ vars.AWS_ACCOUNT_NUMBER }}
    steps:
      - name: create-role
        uses: orbitspot/actions/.github/actions/create-role-service-account@separando-properties
        with:
          role: '${{ github.event.repository.name }}-${{ env.ENV }}'
          namespace: ${{ github.event.repository.name }}
          service_account_name: 'application-permission'
          policy: ${{ vars._POLICY_JSON }}

      - name: create-namespace
        uses: orbitspot/actions/.github/actions/create-namespace-and-service-account@separando-properties
        with:
          namespace: ${{ github.event.repository.name }}
          service_account_name: 'application-permission'

  prepare-helm-replacements:
    name: Building Helm Values
    runs-on: [ '${{ github.ref_name }}', 4unity, linux, self-hosted, x64]
    environment: ${{ github.ref_name }}
    needs: [setup-config, generate-docker]
    strategy:
      matrix:
        artifacts: ${{ fromJson(needs.setup-config.outputs.matrix) }}
    permissions:
      id-token: write
      contents: read
    env:
      ENV: '${{ needs.setup-config.outputs.ENV }}'
    steps:
      - name: Preparar values.yaml
        id: prepare_helm
        uses: orbitspot/actions/.github/actions/prepare-helm-chart-values@separando-properties
        with:
          deployment_name: ${{ matrix.artifacts }}
          grafana_tag: ${{ inputs.grafana_tag }}
        env:
          DB_PORT: ${{ vars.DB_PORT }}
          DB_HOST: ${{ vars.DB_HOST }}
          vars: ${{ toJson(vars) }}
          secrets: ${{ toJson(secrets) }}

  helm-cd-cronjob:
    name: K8s Deploy ${{ matrix.artifacts }}
    runs-on: [ '${{ github.ref_name }}', '4unity', linux, self-hosted, x64]
    environment: ${{ github.ref_name }}
    needs: [prepare-helm-replacements, setup-config]
    strategy:
      matrix:
        artifacts: ${{fromJson(needs.setup-config.outputs.matrix) }}
    permissions:
      id-token: write
      contents: read
    env:
      CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
      CLUSTER_NAME: '${{ needs.setup-config.outputs.CLUSTER_NAME }}'
      ENV: '${{ needs.setup-config.outputs.ENV }}'
    steps:
      - name: helm-apply
        uses: orbitspot/actions/.github/actions/helm-deploy@separando-properties
        with:
          namespace: ${{ github.event.repository.name }}
          helm_values: helm-values-${{ matrix.artifacts }}
          release: ${{ matrix.artifacts }}
          chart_name: orbitspot/orbitspot-cron
          chart_version: 0.2.3
          sets: |
            --set environment=${{env.ENV}} \
            --set region=${{ env.CLUSTER_REGION }} \
            --set 'containers[0].repository.image=${{ vars.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{env.CLUSTER_REGION}}.amazonaws.com/${{ matrix.artifacts }}-${{ github.event.repository.name }}' \
            --set 'containers[0].repository.tag=${{ github.sha }}' \
            --set 'scheduler="${{ inputs.scheduler }}"'
            