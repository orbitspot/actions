name: Push node

on:
  workflow_call:
    inputs:
      module:
        required: true
        type: string
      grafana_tag:
        required: true
        type: string
      version:
        required: true
        type: string
      dockerfile_path:
        required: false
        type: string
        default: ''

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
    setup-config:
      runs-on: ubuntu-latest
      outputs:
        CLUSTER_REGION: '${{ steps.set-output.outputs.CLUSTER_REGION }}'
        CLUSTER_NAME: '${{ steps.set-output.outputs.CLUSTER_NAME }}'
        ENV: '${{ steps.set-output.outputs.ENV }}'
      steps:
        - name: Fetch devops variables
          id: set-output
          uses: orbitspot/actions/.github/actions/fetch-devops-variables@fix-parameters-dinamicos
          with:
            devops_config: '${{ vars._DEVOPS_CONFIG }}'
            branch: 'develop'
    
    building:
        name: Building
        runs-on: ubuntu-latest
        needs: [setup-config]
        permissions:
            id-token: write
            contents: read
        steps:
            - name: Authenticate
              uses: orbitspot/actions/.github/actions/code-artifact-authenticate@fix-parameters-dinamicos
              with:
                  aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                  aws_role_name: ${{ vars.AWS_ROLE_NAME }}
                  aws_region: 'us-east-1'

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '${{ inputs.version }}'

            - name: Bash Co Login
              run: |
                  bash co_login_commands.txt

            - name: Npm Building
              uses: orbitspot/actions/.github/actions/npm-ci@fix-parameters-dinamicos
              with:
                  node_version: '${{ inputs.version }}'
                  customized_dockerfile: '${{ inputs.dockerfile_path  }}'

    generate-docker:
        name: Docker Build Api
        runs-on: ubuntu-latest
        environment: develop
        needs: [setup-config, building]
        strategy:
            matrix:
                artifacts: ['api', 'consumer']
        permissions:
            id-token: write
            contents: read
        env:
          CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
        steps:
          - name: Authenticate
            uses: orbitspot/actions/.github/actions/code-artifact-authenticate@fix-parameters-dinamicos
            with:
              aws_account_number: '${{ vars.AWS_ACCOUNT_NUMBER }}'
              aws_role_name: '${{ vars.AWS_ROLE_NAME }}'
              aws_region: us-east-1
    
          - name: Download Dockerfile from S3
            if: ${{ inputs.dockerfile_path == ''}}
            run: |
              aws s3 cp s3://devops.orbitspot.com/build-github-actions/node/${{ inputs.version }}/Dockerfile Dockerfile
              aws s3 cp s3://devops.orbitspot.com/build-github-actions/scripts/base_script.sh base_script.sh

          - name: Copy Dockerfile from original repository
            if: ${{ inputs.dockerfile_path != '' }}
            run: |
              mv ${{ inputs.dockerfile_path }} Dockerfile
    
          - name: docker-build
            uses: orbitspot/actions/.github/actions/docker@fix-parameters-dinamicos
            with:
                aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                aws_role_name: ${{ vars.AWS_ROLE_NAME }}
                aws_region: ${{ env.CLUSTER_REGION }}
                content: 'building'
                image: '${{ matrix.artifacts }}-${{ github.event.repository.name }}'
                tag: ${{ github.sha }}
                build_args: '--build-arg sha=${{ github.sha }} --build-arg RUNNER=${{ matrix.artifacts }}'
                before_building: |
                    cat base_script.sh scripts/${{ matrix.artifacts }}.sh > ${{ matrix.artifacts }}.sh
                    cat ${{ matrix.artifacts }}.sh

    create-service-account-role:
        name: Creating Aws Resources
        runs-on: ubuntu-latest
        environment: develop
        needs: [setup-config, generate-docker]
        permissions:
            id-token: write
            contents: read
        env:
          CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
          CLUSTER_NAME: '${{ needs.setup-config.outputs.CLUSTER_NAME }}'
          ENV: '${{ needs.setup-config.outputs.ENV }}'
        steps:
            - name: create-role
              uses: orbitspot/actions/.github/actions/create-role-service-account@fix-parameters-dinamicos
              with:
                  role: '${{ github.event.repository.name }}-${{ env.ENV }}'
                  namespace: ${{ github.event.repository.name }}
                  service_account_name: 'application-permission'
                  aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                  aws_role_name: ${{ vars.AWS_ROLE_NAME }}
                  aws_region: ${{ vars.AWS_REGION }}
                  policy: ${{ vars._POLICY_JSON }}

            - name: create-namespace
              uses: orbitspot/actions/.github/actions/create-namespace-and-service-account@fix-parameters-dinamicos
              with:
                  aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                  aws_role_name: ${{ vars.AWS_ROLE_NAME }}
                  aws_region: ${{ env.CLUSTER_REGION }}
                  cluster_name: ${{ env.CLUSTER_NAME }}
                  namespace: ${{ github.event.repository.name }}
                  role_arn: 'arn:aws:iam::${{ vars.AWS_ACCOUNT_NUMBER }}:role/${{ github.event.repository.name }}-${{ env.ENV }}'
                  service_account_name: 'application-permission'

    prepare-helm-replacements:
        name: Building Helm Values
        runs-on: ubuntu-latest
        environment: develop
        needs: [generate-docker]
        strategy:
            matrix:
                artifacts: ['api', 'consumer']
        permissions:
            id-token: write
            contents: read
        steps:
            - uses: actions/checkout@v4
              name: Checkout
              with:
                  ref: ${{ inputs.git_ref }}
                  fetch-depth: 0

            - name: Configurar Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.x'

            - name: Checkout script repository
              uses: actions/checkout@v4
              with:
                  repository: 'orbitspot/actions'
                  path: code

            - name: Authenticate
              uses: orbitspot/actions/.github/actions/code-artifact-authenticate@fix-parameters-dinamicos
              with:
                aws_account_number: '${{ vars.AWS_ACCOUNT_NUMBER }}'
                aws_role_name: '${{ vars.AWS_ROLE_NAME }}'
                aws_region: us-east-1

            - name: Generate Yaml from Parameters
              uses: orbitspot/actions/.github/actions/parameter-store-generate-yaml@fix-parameters-dinamicos
              with:
                vars: ${{ toJson(vars) }}
                secrets: ${{ toJson(secrets) }}
            
            - name: Download Building files
              uses: actions/download-artifact@v4
              with:
                  name: variables

            - name: Download Helm from S3
              run: |
                cat variables.yaml
                aws s3 cp s3://devops.orbitspot.com/build-github-actions/deploy/${{ matrix.artifacts }}/values.yaml values.yaml
                sed -i 's/<GRAFANA-TAG>/${{ inputs.grafana_tag }}/g' values.yaml
                sed -i 's/<NOME-REPOSITORIO>/${{ github.event.repository.name }}/g' values.yaml
                mkdir -p .github/helm/${{ matrix.artifacts }}
                mv values.yaml .github/helm/${{ matrix.artifacts }}/values.yaml

            - name: append-data-in-properties
              run: |
                  RABBITMQ_BASE64=$(echo -n "${{ secrets.BROKER_AMQP }}" | base64)
                  echo "${{ vars._PROPERTIES }}" > values.properties
                  echo "build.istio.egress.databases.default.port=${{ vars.DB_PORT }}" >> values.properties
                  echo "build.istio.egress.databases.default.host=${{ vars.DB_HOST }}" >> values.properties
                  echo "build.secrets.rabbitmq_auth_host=$RABBITMQ_BASE64" >> values.properties

            - name: replace-data
              env:
                  PREFIX: .${{ github.event.repository.name }}
                  PROPERTIES_PATH: /opt/actions-runner/_work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/values.properties
                  YAML_PATH: .github/helm/${{ matrix.artifacts }}/values.yaml
              run: python code/.github/scripts/replace-properties.py

            - name: append-parameters
              run: |
                  parameters=$(cat variables.yaml)
                  echo "" >> .github/helm/${{ matrix.artifacts }}/values.yaml
                  echo "$parameters" >> .github/helm/${{ matrix.artifacts }}/values.yaml
                  cat .github/helm/${{ matrix.artifacts }}/values.yaml

            - name: upload
              uses: actions/upload-artifact@v4
              with:
                  name: helm-values-${{ matrix.artifacts }}
                  path: .github/helm/${{ matrix.artifacts }}/values.yaml
                  retention-days: 1

    helm-cd-api:
        name: K8s Deploy Api
        runs-on: ubuntu-latest
        environment: develop
        needs: [setup-config, prepare-helm-replacements]
        permissions:
            id-token: write
            contents: read
        env:
          CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
          CLUSTER_NAME: '${{ needs.setup-config.outputs.CLUSTER_NAME }}'
          ENV: '${{ needs.setup-config.outputs.ENV }}'
        steps:
            - uses: actions/checkout@v4
              name: Checkout
              with:
                  ref: ${{ inputs.git_ref }}
                  fetch-depth: 0

            - name: configure
              uses: orbitspot/actions/.github/actions/kubernetes-auth@fix-parameters-dinamicos
              with:
                  aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                  aws_role_name: ${{ vars.AWS_ROLE_NAME }}
                  aws_region: ${{ env.CLUSTER_REGION }}
                  cluster_name: ${{ env.CLUSTER_NAME }}

            - name: helm-apply
              uses: orbitspot/actions/.github/actions/helm-deploy@fix-parameters-dinamicos
              with:
                  aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                  aws_region: ${{ env.CLUSTER_REGION }}
                  namespace: ${{ github.event.repository.name }}
                  helm_values: helm-values-api
                  release: api
                  chart_name: orbitspot/orbitspot-microservices
                  chart_version: 3.0.1
                  sets: |
                      --set environment=${{ env.ENV}} \
                      --set region=${{ env.CLUSTER_REGION }} \
                      --set 'containers[0].repository.image=${{ vars.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ env.CLUSTER_REGION }}.amazonaws.com/api-${{ github.event.repository.name }}' \
                      --set 'containers[0].repository.tag=${{ github.sha }}'

    helm-cd-consumer:
        name: K8s Deploy Consumer
        runs-on: ubuntu-latest
        environment: develop
        needs: [setup-config, prepare-helm-replacements]
        permissions:
            id-token: write
            contents: read
        env:
          CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
          CLUSTER_NAME: '${{ needs.setup-config.outputs.CLUSTER_NAME }}'
          ENV: '${{ needs.setup-config.outputs.ENV }}'
        steps:
            - uses: actions/checkout@v4
              name: Checkout
              with:
                  ref: ${{ inputs.git_ref }}
                  fetch-depth: 0

            - name: configure
              uses: orbitspot/actions/.github/actions/kubernetes-auth@fix-parameters-dinamicos
              with:
                  aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                  aws_role_name: ${{ vars.AWS_ROLE_NAME }}
                  aws_region: ${{ env.CLUSTER_REGION }}
                  cluster_name: ${{ env.CLUSTER_NAME }}

            - name: helm-apply
              uses: orbitspot/actions/.github/actions/helm-deploy@fix-parameters-dinamicos
              with:
                  aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                  aws_region: ${{ env.CLUSTER_REGION }}
                  namespace: ${{ github.event.repository.name }}
                  helm_values: helm-values-consumer
                  release: consumer
                  chart_name: orbitspot/orbitspot-terraform
                  chart_version: 0.3.5
                  sets: |
                      --set environment=${{ env.ENV}} \
                      --set region=${{ env.CLUSTER_REGION }} \
                      --set 'containers[0].repository.image=${{ vars.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ env.CLUSTER_REGION }}.amazonaws.com/consumer-${{ github.event.repository.name }}' \
                      --set 'containers[0].repository.tag=${{ github.sha }}'
