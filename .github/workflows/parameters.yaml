name: Parameters

on:
  workflow_call:
    inputs:
      module:
        required: true
        type: string

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  setup-config:
    runs-on: [ '${{ github.ref_name }}', '${{ inputs.module }}', linux, self-hosted, x64]
    outputs:
      CLUSTER_REGION: ${{ steps.set-output.outputs.CLUSTER_REGION }}
    steps:
      - name: Fetch devops variables
        id: set-output
        uses: orbitspot/actions/.github/actions/fetch-devops-variables@v18.1
        with:
          devops_config: ${{ vars.DEVOPS_CONFIG }}
          branch: ${{ github.ref_name }}

  loading-environments:
    name: loading-environments
    runs-on: [ '${{ github.ref_name }}', '${{ inputs.module }}', linux, self-hosted, x64]
    needs: [setup-config]
    outputs:
      environments: ${{ steps.environments.outputs.result }}
      secrets: ${{ steps.secrets.outputs.result }}
    steps:
        - uses: actions/checkout@v4
          name: Checkout
          with:
            ref: ${{ inputs.git_ref }}
            fetch-depth: 0

        - name: Configurar Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.x'

        - name: Cache dependencies
          uses: actions/cache@v4
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
                ${{ runner.os }}-pip-

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install pyyaml

        - name: Checkout script repository
          uses: actions/checkout@v4
          with:
            repository: 'orbitspot/actions'
            path: code

        - name: Loading environments
          id: environments
          env:
            PREFIX: /${{ github.event.repository.name }}/environment/
            PARAMETERS_FILE: .github/helm/parameter-store.yaml
          run: |
            keys=$(python code/.github/scripts/extract-environment-names.py)
            keys=$(echo "$keys" | jq -c .)
            echo "result=$keys" >> $GITHUB_OUTPUT

        - name: Loading secrets
          id: secrets
          env:
            PREFIX: /${{ github.event.repository.name }}/secret/
            PARAMETERS_FILE: .github/helm/parameter-store.yaml
          run: |
            keys=$(python code/.github/scripts/extract-environment-names.py)
            keys=$(echo "$keys" | jq -c .)
            echo "result=$keys" >> $GITHUB_OUTPUT

  create-parameters-vars:
      name: Create parameters
      runs-on: [ '${{ github.ref_name }}', '${{ inputs.module }}', linux, self-hosted, x64]
      environment: ${{ github.ref_name }}
      needs: loading-environments
      permissions:
        id-token: write
        contents: read
      steps:
        - name: Generate Envs
          id: generate-environments-vars
          uses: orbitspot/actions/.github/actions/parameter-store-dynamic-environments@v18.1
          with:
            keys: ${{ needs.loading-environments.outputs.environments }}
            environment_json: ${{ toJson(vars) }}
            file_name: variables

  create-parameters-secrets:
      name: Create parameters secrets
      runs-on: [ '${{ github.ref_name }}', '${{ inputs.module }}', linux, self-hosted, x64]
      environment: ${{ github.ref_name }}
      needs: loading-environments
      permissions:
        id-token: write
        contents: read
      steps:
        - name: Generate Envs
          id: generate-environments-secrets
          uses: orbitspot/actions/.github/actions/parameter-store-dynamic-environments@v18.1
          with:
            keys: ${{ needs.loading-environments.outputs.secrets }}
            environment_json: ${{ toJson(secrets) }}
            file_name: secrets

  apply-parameters:
      name: Apply parameters
      runs-on: [ '${{ github.ref_name }}', '${{ inputs.module }}', linux, self-hosted, x64]
      environment: ${{ github.ref_name }}
      needs: [setup-config, create-parameters-vars, create-parameters-secrets]
      env:
        CLUSTER_REGION: ${{ needs.setup-config.outputs.CLUSTER_REGION }}
      permissions:
        id-token: write
        contents: read
      steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - uses: hashicorp/setup-terraform@v3
        name: setup
        with:
          terraform_version: "1.5.0"
              
      - name: Start terraform
        uses: orbitspot/actions/.github/actions/parameter-store@v18.1
        with:
          modulo: '${{ inputs.module }}'
          repository: "${{ github.event.repository.name }}"
