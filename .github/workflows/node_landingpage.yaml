name: Push node

on:
  workflow_call:
    inputs:
      module:
        required: true
        type: string
      grafana_tag:
        required: true
        type: string

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
    setup-config:
      name: Set Up Config
      runs-on: ubuntu-latest
      environment: ${{ github.ref_name }}
      outputs:
        CLUSTER_REGION: '${{ steps.set-output.outputs.CLUSTER_REGION }}'
        CLUSTER_NAME: '${{ steps.set-output.outputs.CLUSTER_NAME }}'
        ENV: '${{ steps.set-output.outputs.ENV }}'
      steps:
        - name: Setup Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.x'
        
        - name: Checkout script repository
          uses: actions/checkout@v4
          with:
            repository: 'orbitspot/actions'
            path: code
            ref: 'v18.10'
        
        - name: Check required variables
          env:
            variables_json: ${{ toJson(vars) }}
            setup: 'landingpage'
          run: |
            python code/.github/scripts/check-required-variables.py

        - name: Fetch devops variables
          id: set-output
          uses: orbitspot/actions/.github/actions/fetch-devops-variables@v19.0
          with:
            devops_config: '${{ vars._DEVOPS_CONFIG }}'
            branch: '${{ github.ref_name }}'

    building:
        name: Building
        runs-on: ['${{ github.ref_name }}', '${{ inputs.module }}', linux, self-hosted, x64]
        environment: ${{ github.ref_name }}
        needs: [setup-config]
        permissions:
          id-token: write
          contents: read
        env:
          CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
        steps:
            - name: Configure aws credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_NUMBER }}:role/${{ vars.AWS_ROLE_NAME }}"
                role-session-name: "${{ vars.AWS_ROLE_NAME }}"
                aws-region: "us-east-1"
            
            - name: Configurar Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.x'

            - uses: actions/checkout@v4
              name: Checkout
              with:
                ref: ${{ inputs.git_ref }}
                fetch-depth: 0

            - uses: actions/checkout@v4
              name: Checkout
              with:
                  repository: 'orbitspot/actions'
                  ref: v19.0
                  path: code

            - name: Fetch landingpage variables
              env:
                frontend_config: ${{ vars._LANDINGPAGE_CONFIG }}
                branch: '${{ github.ref_name }}'
                variables_json: ${{ toJson(vars) }}
                secrets_json: ${{ toJson(secrets) }}
              run: |
                python code/.github/scripts/generate-environment-frontend.py
                cat .env

            - name: Generate Build Args
              uses: orbitspot/actions/.github/actions/generate-build-args@v19.0
              with:
                landingpage_config: '${{ vars._LANDINGPAGE_CONFIG }}'
                branch: '${{ github.ref_name }}'
                
            - name: Download Dockerfile from S3
              run: |
                aws s3 sync s3://devops.orbitspot.com/build-github-actions/v1/deploy/landingpage .
            
            - name: docker-build
              uses: orbitspot/actions/.github/actions/docker@v19.0
              with:
                  aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                  aws_role_name: ${{ vars.AWS_ROLE_NAME }}
                  aws_region: ${{ env.CLUSTER_REGION }}
                  image: ${{ github.event.repository.name }}
                  tag: ${{ github.sha }}
                  build_args: '${{ env.BUILD_ARGS }} --build-arg AWS_ACCESS_KEY=${{ secrets.ACCESS_KEY_CODE_ARTIFACT }} --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.SECRET_ACCESS_KEY_CODE_ARTIFACT }}'

    create-service-account-role:
        name: Creating Aws Resources
        runs-on: ['${{ github.ref_name }}', '${{ inputs.module }}', linux, self-hosted, x64]
        environment: ${{ github.ref_name }}
        needs: [setup-config, building]
        permissions:
            id-token: write
            contents: read
        env:
          CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
          CLUSTER_NAME: '${{ needs.setup-config.outputs.CLUSTER_NAME }}'
          ENV: '${{ needs.setup-config.outputs.ENV }}'
        steps:
            - name: create-role
              uses: orbitspot/actions/.github/actions/create-role-service-account@v19.0
              with:
                  role: "${{ github.event.repository.name }}-${{ env.ENV }}"
                  namespace: ${{ github.event.repository.name }}
                  service_account_name: "application-permission"
                  aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                  aws_role_name: ${{ vars.AWS_ROLE_NAME }}
                  aws_region: ${{ vars._AWS_REGION }}

            - name: create-namespace
              uses: orbitspot/actions/.github/actions/create-namespace-and-service-account@v19.0
              with:
                  aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                  aws_role_name: ${{ vars.AWS_ROLE_NAME }}
                  aws_region: ${{ env.CLUSTER_REGION }}
                  cluster_name: ${{ env.CLUSTER_NAME }}
                  namespace: ${{ github.event.repository.name }}
                  role_arn: "arn:aws:iam::${{ vars.AWS_ACCOUNT_NUMBER }}:role/${{ github.event.repository.name }}-${{ env.ENV }}"
                  service_account_name: "application-permission"

    prepare-helm-replacements:
      name: Building Helm Values
      runs-on: ['${{ github.ref_name }}', '${{ inputs.module }}', linux, self-hosted, x64]
      environment: ${{ github.ref_name }}
      needs: [setup-config, building]
      permissions:
          id-token: write
          contents: read
      env:
        ENV: '${{ needs.setup-config.outputs.ENV }}'
      steps:
          - uses: actions/checkout@v4
            name: Checkout
            with:
                ref: '${{ github.ref_name }}'
                fetch-depth: 0

          - name: Configurar Python
            uses: actions/setup-python@v5
            with:
                python-version: '3.x'

          - name: Checkout script repository
            uses: actions/checkout@v4
            with:
                repository: 'orbitspot/actions'
                path: code
                ref: 'v18.10'

          - name: Authenticate
            uses: orbitspot/actions/.github/actions/code-artifact-authenticate@v18.10
            with:
              aws_account_number: '${{ vars.AWS_ACCOUNT_NUMBER }}'
              aws_role_name: '${{ vars.AWS_ROLE_NAME }}'
              aws_region: us-east-1

          - name: Download Helm from S3 - 1 Host
            if: ${{ vars.HOST_MF_2 == ''}}
            run: |
              aws s3 cp s3://devops.orbitspot.com/build-github-actions/v1/deploy/landingpage/one_host_values.yaml values.yaml
              sed -i 's/<GRAFANA-TAG>/${{ inputs.grafana_tag }}/g' values.yaml
              sed -i 's/<NOME-REPOSITORIO>/${{ github.event.repository.name }}/g' values.yaml
              mkdir -p .github/helm/next
              mv values.yaml .github/helm/next/values.yaml
              cat .github/helm/next/values.yaml
       
          - name: Download Helm from S3 - 2 Hosts
            if: ${{ vars.HOST_MF_2 != ''}}
            run: |
              aws s3 cp s3://devops.orbitspot.com/build-github-actions/v1/deploy/landingpage/two_hosts_values.yaml values.yaml
              sed -i 's/<GRAFANA-TAG>/${{ inputs.grafana_tag }}/g' values.yaml
              sed -i 's/<NOME-REPOSITORIO>/${{ github.event.repository.name }}/g' values.yaml
              mkdir -p .github/helm/next
              mv values.yaml .github/helm/next/values.yaml
              cat .github/helm/next/values.yaml

          - name: Append Properties
            run: |
                echo "${{ vars._PROPERTIES }}" > values.properties
                cat values.properties

          - name: replace-data
            env:
                PREFIX: .${{ github.event.repository.name }}
                PROPERTIES_PATH: /opt/actions-runner/_work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/values.properties
                YAML_PATH: .github/helm/next/values.yaml
            run: python code/.github/scripts/replace-properties.py && cat .github/helm/next/values.yaml

          - name: upload
            uses: actions/upload-artifact@v4
            with:
                name: helm-values
                path: .github/helm/next/values.yaml
                retention-days: 1

    helm-deploy:
        name: K8s Deploy
        runs-on: ['${{ github.ref_name }}', '${{ inputs.module }}', linux, self-hosted, x64]
        environment: ${{ github.ref_name }}
        needs: [ setup-config, prepare-helm-replacements ]
        permissions:
            id-token: write
            contents: read
        env:
          CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
          CLUSTER_NAME: '${{ needs.setup-config.outputs.CLUSTER_NAME }}'
          ENV: '${{ needs.setup-config.outputs.ENV }}'
        steps:
            - name: configure
              uses: orbitspot/actions/.github/actions/kubernetes-auth@v19.0
              with:
                  aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                  aws_role_name: ${{ vars.AWS_ROLE_NAME }}
                  aws_region: ${{ env.CLUSTER_REGION }}
                  cluster_name: ${{ env.CLUSTER_NAME }}

            - name: Helm Apply 1 host
              if: ${{ vars.HOST_MF_2 == ''}}
              uses: orbitspot/actions/.github/actions/helm-deploy@v19.0
              with:
                aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                aws_region: ${{ env.CLUSTER_REGION }}
                namespace: ${{ github.event.repository.name }}
                helm_values: helm-values
                release: landingpage
                chart_name: orbitspot/orbitspot-front-nginx
                chart_version: 1.1.1
                sets: |
                 --set environment=${{ env.ENV}} \
                 --set region=${{ env.CLUSTER_REGION }} \
                 --set 'containers[0].repository.image=${{ vars.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ env.CLUSTER_REGION }}.amazonaws.com/${{ github.event.repository.name }}' \
                 --set 'containers[0].repository.tag=${{ github.sha }}' \
                 --set ingress.annotations.acm=${{ vars.ACM_ARN }} \
                 --set ingress.rules[0].host=${{ vars.HOST_MF }} 
                  
            - name: Helm Apply 2 hosts
              if: ${{ vars.HOST_MF_2 != ''}}
              uses: orbitspot/actions/.github/actions/helm-deploy@v19.0
              with:
                aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
                aws_region: ${{ env.CLUSTER_REGION }}
                namespace: ${{ github.event.repository.name }}
                helm_values: helm-values
                release: landingpage
                chart_name: orbitspot/orbitspot-front-nginx
                chart_version: 1.1.1
                sets: |
                  --set environment=${{ env.ENV}} \
                  --set region=${{ env.CLUSTER_REGION }} \
                  --set 'containers[0].repository.image=${{ vars.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ env.CLUSTER_REGION }}.amazonaws.com/${{ github.event.repository.name }}' \
                  --set 'containers[0].repository.tag=${{ github.sha }}' \
                  --set ingress.annotations.acm=${{ vars.ACM_ARN }} \
                  --set ingress.rules[0].host=${{ vars.HOST_MF }} \
                  --set ingress.rules[1].host=${{ vars.HOST_MF_2 }}