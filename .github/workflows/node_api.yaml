name: Push node

on:
  workflow_call:
    inputs:
      module:
        required: true
        type: string
      grafana_tag:
        required: true
        type: string
      version:
        required: true
        type: string
      dockerfile_path:
        required: false
        type: string
        default: ''
      package_manager:
        description: 'Package manager to use (npm or yarn)'
        required: false
        type: string
        default: 'npm'
concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  setup-config:
    name: Set Up Config
    runs-on: ['${{ github.ref_name }}', 4unity, linux, self-hosted, x64]
    environment: ${{ github.ref_name }}
    outputs:
      PROPERTIES: '${{ steps.properties.outputs.properties }}'
      CLUSTER_REGION: '${{ steps.set-output.outputs.CLUSTER_REGION }}'
      CLUSTER_NAME: '${{ steps.set-output.outputs.CLUSTER_NAME }}'
      ACM_ARN: '${{ steps.set-output.outputs.ACM_ARN }}'
      ENV: '${{ steps.set-output.outputs.ENV }}'
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      scaledjob-matrix: ${{ steps.set-matrix.outputs.scaledjob_matrix }}
    steps:
      - name: Set up
        id: set-output
        uses:  orbitspot/actions/.github/actions/setup-config@separando-properties
        with:
          setup: 'api'
          repo_vars: '${{ toJson(vars) }}'
          devops_config: '${{ vars._DEVOPS_CONFIG }}'

      - name: Checkout
        uses: actions/checkout@v4

      - id: set-matrix
        shell: bash
        run: |
          set -e
          PROJECT_ROOT=$(git rev-parse --show-toplevel)
          SCRIPT_DIR="$PROJECT_ROOT/.github/scripts"
          scripts=($(find "$SCRIPT_DIR" -maxdepth 1 -type f -name "*.sh" -exec basename {} .sh \;))
          matrix=$(printf '%s\n' "${scripts[@]}" | jq -R . | jq -cs 'map(select(contains("cronjob") | not))')
          scaledjob_matrix=$(echo "$matrix" | jq -c '[.[] | select(. != "api")]')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "scaledjob_matrix=$scaledjob_matrix" >> $GITHUB_OUTPUT

      - name: Echo variables
        id: properties
        run: |
            united="${{ vars._PROPERTIES_API }}
            ${{ vars._PROPERTIES_SCALEDJOB }}"

            echo "===== MERGED ====="
            echo "$united"
            {
              echo "properties<<EOF"
              echo "$united"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"

  building:
    name: Building
    runs-on: [ '${{ github.ref_name }}', 4unity, linux, self-hosted, x64]
    needs: [setup-config]
    permissions:
        id-token: write
        contents: read
    steps:
      - name: Building
        uses: orbitspot/actions/.github/actions/package-manager-install@separando-properties
        with:
            node_version: '${{ inputs.version }}'
            customized_dockerfile: '${{ inputs.dockerfile_path  }}'

  generate-docker: #virar action: build_args e before_building sao parametros
    name: Docker Build
    runs-on: [ '${{ github.ref_name }}', 4unity, linux, self-hosted, x64]
    environment: ${{ github.ref_name }}
    needs: [setup-config, building]
    strategy:
      matrix:
        artifacts: ${{ fromJson(needs.setup-config.outputs.matrix) }}
    permissions:
      id-token: write
      contents: read
    env:
      CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
    steps:
      - name: Authenticate
        uses: orbitspot/actions/.github/actions/code-artifact-authenticate@separando-properties
        with:
          aws_account_number: '${{ vars.AWS_ACCOUNT_NUMBER }}'
          aws_role_name: '${{ vars.AWS_ROLE_NAME }}'
          aws_region: us-east-1

      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download Dockerfile from S3
        if: ${{ inputs.dockerfile_path == '' }}
        run: |
          aws s3 cp s3://devops.orbitspot.com/build-github-actions/v1/node/${{ inputs.version }}/Dockerfile Dockerfile
          aws s3 cp s3://devops.orbitspot.com/build-github-actions/v1/scripts/base_script.sh base_script.sh

      - name: Copy Dockerfile from original repository
        if: ${{ inputs.dockerfile_path != '' }}
        run: |
          mv ${{ inputs.dockerfile_path }} Dockerfile
          aws s3 cp s3://devops.orbitspot.com/build-github-actions/v1/scripts/base_script.sh base_script.sh
          
      - name: docker-build
        uses: orbitspot/actions/.github/actions/docker@separando-properties
        with:
          aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
          aws_role_name: ${{ vars.AWS_ROLE_NAME }}
          aws_region: ${{ env.CLUSTER_REGION }}
          content: 'building'
          image: '${{ matrix.artifacts }}-${{ github.event.repository.name }}'
          tag: ${{ github.sha }}
          build_args: '--build-arg sha=${{ github.sha }} --build-arg RUNNER=${{ matrix.artifacts }}'
          before_building: |
            cat base_script.sh scripts/${{ matrix.artifacts }}.sh > ${{ matrix.artifacts }}.sh
            cat ${{ matrix.artifacts }}.sh

  create-service-account-role: #virar action
    name: Creating Aws Resources
    runs-on: [ '${{ github.ref_name }}', 4unity, linux, self-hosted, x64]
    environment: ${{ github.ref_name }}
    needs: [setup-config, generate-docker]
    permissions:
      id-token: write
      contents: read
    env:
      CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
      CLUSTER_NAME: '${{ needs.setup-config.outputs.CLUSTER_NAME }}'
      ENV: '${{ needs.setup-config.outputs.ENV }}'
    steps:
      - name: create-role
        uses: orbitspot/actions/.github/actions/create-role-service-account@separando-properties
        with:
          role: '${{ github.event.repository.name }}-${{ env.ENV }}'
          namespace: ${{ github.event.repository.name }}
          service_account_name: 'application-permission'
          aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
          aws_role_name: ${{ vars.AWS_ROLE_NAME }}
          aws_region: ${{ vars._AWS_REGION }}
          policy: ${{ vars._POLICY_JSON }}

      - name: create-namespace
        uses: orbitspot/actions/.github/actions/create-namespace-and-service-account@separando-properties
        with:
          aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
          aws_role_name: ${{ vars.AWS_ROLE_NAME }}
          aws_region: ${{ env.CLUSTER_REGION }}
          cluster_name: ${{ env.CLUSTER_NAME }}
          namespace: ${{ github.event.repository.name }}
          role_arn: 'arn:aws:iam::${{ vars.AWS_ACCOUNT_NUMBER }}:role/${{ github.event.repository.name }}-${{ env.ENV }}'
          service_account_name: 'application-permission'

  prepare-helm-replacements:
    name: Building Helm Values
    runs-on: [ '${{ github.ref_name }}', 4unity, linux, self-hosted, x64]
    environment: ${{ github.ref_name }}
    needs: [setup-config, generate-docker]
    strategy:
      matrix:
        artifacts: ${{ fromJson(needs.setup-config.outputs.matrix) }}
    permissions:
      id-token: write
      contents: read
    env:
      ACM_ARN: '${{ needs.setup-config.outputs.ACM_ARN }}'
      ENV: '${{ needs.setup-config.outputs.ENV }}'
      PROPERTIES: '${{ needs.setup-config.outputs.PROPERTIES }}'
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          ref: '${{ inputs.git_ref }}'
          fetch-depth: 0

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Checkout script repository
        uses: actions/checkout@v4
        with:
          repository: 'orbitspot/actions'
          path: code
          ref: 'separando-properties'

      - name: Authenticate
        uses: orbitspot/actions/.github/actions/code-artifact-authenticate@separando-properties
        with:
          aws_account_number: '${{ vars.AWS_ACCOUNT_NUMBER }}'
          aws_role_name: '${{ vars.AWS_ROLE_NAME }}'
          aws_region: us-east-1

      - name: Generate Yaml from Parameters
        env:
          environments: ${{ toJson(vars) }}
          secrets: ${{ toJson(secrets) }}
          repository_name: ${{ github.event.repository.name }}
        run: |
          pip install pyyaml
          python code/.github/scripts/generate-environment-yaml.py
          cat variables.yaml

      - name: Preparar values.yaml
        id: prepare_helm
        uses: orbitspot/actions/.github/actions/prepare-helm-chart-values@separando-properties
        with:
          deployment_name: ${{ matrix.artifacts }}
          grafana_tag: ${{ inputs.grafana_tag }}
        env:
          BROKER_AMQP: ${{ secrets.BROKER_AMQP }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_HOST: ${{ vars.DB_HOST }}
          PROPERTIES: ${{ env.PROPERTIES }}
          OLD_INGRESS_HOST: ${{ vars.OLD_INGRESS_HOST }}

      - name: append-parameters
        run: |
          parameters=$(cat variables.yaml)
          echo "" >> .github/helm/${{ matrix.artifacts }}/values.yaml
          echo "$parameters" >> .github/helm/${{ matrix.artifacts }}/values.yaml
          cat .github/helm/${{ matrix.artifacts }}/values.yaml

      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: helm-values-${{ matrix.artifacts }}
          path: .github/helm/${{ matrix.artifacts }}/values.yaml
          retention-days: 1

  helm-cd-api:
    name: K8s Deploy api
    runs-on: [ '${{ github.ref_name }}', 4unity, linux, self-hosted, x64]
    environment: ${{ github.ref_name }}
    needs: [setup-config, prepare-helm-replacements]
    permissions:
      id-token: write
      contents: read
    env:
      CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
      CLUSTER_NAME: '${{ needs.setup-config.outputs.CLUSTER_NAME }}'
      ENV: '${{ needs.setup-config.outputs.ENV }}'
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          ref: ${{ inputs.git_ref }}
          fetch-depth: 0

      - name: configure
        uses: orbitspot/actions/.github/actions/kubernetes-auth@separando-properties
        with:
          aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
          aws_role_name: ${{ vars.AWS_ROLE_NAME }}
          aws_region: ${{ env.CLUSTER_REGION }}
          cluster_name: ${{ env.CLUSTER_NAME }}

      - name: helm-apply (sem ingress antigo)
        if: ${{ vars.OLD_INGRESS_HOST == '' }}
        uses: orbitspot/actions/.github/actions/helm-deploy@separando-properties
        with:
          aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
          aws_region: ${{ env.CLUSTER_REGION }}
          namespace: ${{ github.event.repository.name }}
          helm_values: helm-values-api
          release: api
          chart_name: orbitspot/orbitspot-microservices
          chart_version: 3.0.2
          sets: |
            --set environment=${{ env.ENV }} \
            --set region=${{ env.CLUSTER_REGION }} \
            --set 'containers[0].repository.image=${{ vars.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ env.CLUSTER_REGION }}.amazonaws.com/api-${{ github.event.repository.name }}' \
            --set 'containers[0].repository.tag=${{ github.sha }}'

      - name: helm-apply (com OLD_INGRESS_HOST)
        if: ${{ vars.OLD_INGRESS_HOST != '' }}
        uses: orbitspot/actions/.github/actions/helm-deploy@separando-properties
        with:
          aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
          aws_region: ${{ env.CLUSTER_REGION }}
          namespace: ${{ github.event.repository.name }}
          helm_values: helm-values-api
          release: api
          chart_name: orbitspot/orbitspot-microservices
          chart_version: 3.0.2
          sets: |
            --set environment=${{ env.ENV }} \
            --set region=${{ env.CLUSTER_REGION }} \
            --set 'containers[0].repository.image=${{ vars.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ env.CLUSTER_REGION }}.amazonaws.com/api-${{ github.event.repository.name }}' \
            --set 'containers[0].repository.tag=${{ github.sha }}' \
            --set ingress.rules[0].host=${{ vars.OLD_INGRESS_HOST }}

  helm-cd-scaledjob:
        name: K8s Deploy ${{ matrix.artifacts }}
        if: ${{ needs.setup-config.outputs.scaledjob-matrix != '[]' }}
        runs-on: [ '${{ github.ref_name }}', 4unity, linux, self-hosted, x64]
        environment: ${{ github.ref_name }}
        needs: [setup-config, prepare-helm-replacements]
        strategy:
          matrix:
            artifacts: ${{fromJson(needs.setup-config.outputs.scaledjob-matrix) }}
        permissions:
          id-token: write
          contents: read
        env:
          CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
          CLUSTER_NAME: '${{ needs.setup-config.outputs.CLUSTER_NAME }}'
          ENV: '${{ needs.setup-config.outputs.ENV }}'
        steps:
          - uses: actions/checkout@v4
            name: Checkout
            with:
              ref: ${{ inputs.git_ref }}
              fetch-depth: 0

          - name: configure
            uses: orbitspot/actions/.github/actions/kubernetes-auth@separando-properties
            with:
              aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
              aws_role_name: ${{ vars.AWS_ROLE_NAME }}
              aws_region: ${{ env.CLUSTER_REGION }}
              cluster_name: ${{ env.CLUSTER_NAME }}

          - name: helm-apply
            uses: orbitspot/actions/.github/actions/helm-deploy@separando-properties
            with:
              aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
              aws_region: ${{ env.CLUSTER_REGION }}
              namespace: ${{ github.event.repository.name }}
              helm_values: helm-values-${{ matrix.artifacts }}
              release: ${{ matrix.artifacts }}
              chart_name: orbitspot/orbitspot-job
              chart_version: 0.1.5
              sets: |
                    --set environment=${{env.ENV}} \
                    --set region=${{ env.CLUSTER_REGION }} \
                    --set 'containers[0].repository.image=${{ vars.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{env.CLUSTER_REGION}}.amazonaws.com/${{ matrix.artifacts }}-${{ github.event.repository.name }}' \
                    --set 'keda.secrets.data.rabbitmq_http_host=${{ secrets.BROKER_AMQP_SCALED_JOB_BASE64 }}' \
                    --set 'containers[0].repository.tag=${{ github.sha }}' \
                    --set 'containers[0].environments.SERVICE_TYPE=${{ matrix.artifacts }}'
          