name: Migration
on:
  workflow_call:
    inputs:
      module:
        required: true
        type: string
      run_command:
        required: true
        type: string
      grafana_tag:
        required: true
        type: string

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  setup-config:
    runs-on: ubuntu-latest
    outputs:
      CLUSTER_REGION: '${{ steps.set-output.outputs.CLUSTER_REGION }}'
      CLUSTER_NAME: '${{ steps.set-output.outputs.CLUSTER_NAME }}'
      ENV: '${{ steps.set-output.outputs.ENV }}'
    steps:
      - name: Fetch devops variables
        id: set-output
        uses: orbitspot/actions/.github/actions/fetch-devops-variables@fix-npm-ci
        with:
          devops_config: '${{ vars.DEVOPS_CONFIG }}'
          branch: 'develop'

  # building:
  #   name: Building
  #   runs-on: ubuntu-latest
  #   needs: [setup-config]
  #   permissions:
  #     id-token: write
  #     contents: read
  #   env:
  #     CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
  #   steps:
  #     - name: Authenticate
  #       uses: orbitspot/actions/.github/actions/code-artifact-authenticate@fix-npm-ci
  #       with:
  #         aws_account_number: '${{ vars.AWS_ACCOUNT_NUMBER }}'
  #         aws_role_name: '${{ vars.AWS_ROLE_NAME }}'
  #         aws_region: us-east-1

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - name: Bash Co Login
  #       run: |
  #         bash co_login_commands.txt

  #     - name: Npm Building
  #       uses: orbitspot/actions/.github/actions/npm-ci@fix-npm-ci
  #       with:
  #         node_version: '20'

  generate-docker:
    name: Docker Build Migration
    runs-on: ubuntu-latest
    needs: [setup-config]
    environment: 'develop'
    permissions:
      id-token: write
      contents: read
    env:
      CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          ref: '${{ inputs.git_ref }}'
          fetch-depth: 0

      - name: Authenticate
        uses: orbitspot/actions/.github/actions/code-artifact-authenticate@fix-npm-ci
        with:
          aws_account_number: '${{ vars.AWS_ACCOUNT_NUMBER }}'
          aws_role_name: '${{ vars.AWS_ROLE_NAME }}'
          aws_region: us-east-1

      - name: Download Files from S3
        run: |
          aws s3 sync s3://devops.orbitspot.com/build-github-actions/migration/ .
          ls
          sed -i 's/<NOME-DO-REPOSITORIO>/${{ github.event.repository.name }}/g' values.yaml
          mkdir .github/helm/migration
          mv values.yaml .github/helm/migration/values.yaml
          cat .github/helm/migration/values.yaml
    # sed -i 's/<TAG-GRAFANA>/${{ inputs.grafana_tag }}/g' values.yaml

      # - name: docker-build
      #   uses: orbitspot/actions/.github/actions/docker@fix-npm-ci
      #   with:
      #     aws_account_number: '${{ vars.AWS_ACCOUNT_NUMBER }}'
      #     aws_role_name: '${{ vars.AWS_ROLE_NAME }}'
      #     aws_region: '${{ env.CLUSTER_REGION }}'
      #     image: 'migration-${{ github.event.repository.name }}'
      #     content: 'building'
      #     tag: '${{ github.sha }}'
      #     build_args: '--build-arg sha=${{ github.sha }} --build-arg RUNNER=migration'
      #     before_building: |
      #       echo "${{ inputs.run_command }}" >> migration.sh
      #       cat migration.sh

  prepare-helm-replacements:
    name: Building Helm Values
    runs-on: ubuntu-latest
    environment: 'develop'
    needs: [generate-docker]
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          ref: '${{ inputs.git_ref }}'
          fetch-depth: 0

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Checkout script repository
        uses: actions/checkout@v4
        with:
          repository: orbitspot/actions
          path: code

      - name: append-data-in-properties
        run: |
          echo "${{ vars._PROPERTIES }}" > values.properties
          echo "build.istio.egress.databases.default.port=${{ vars.DB_PORT }}" >> values.properties
          echo "build.istio.egress.databases.default.host=${{ vars.DB_HOST }}" >> values.properties
          echo "tag_grafana=${{ inputs.grafana_tag }}" >> values.properties
          cat .github/helm/migration/values.yaml

      - name: replace-data
        env:
          PREFIX: '.${{ github.event.repository.name }}'
          PROPERTIES_PATH: /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/values.properties
          YAML_PATH: .github/helm/migration/values.yaml
        run: python code/.github/scripts/replace-properties.py

      - name: append-parameters
        run: |
          parameters=$(cat .github/helm/parameter-store.yaml)
          echo "" >> .github/helm/migration/values.yaml
          echo "$parameters" >> .github/helm/migration/values.yaml
          cat .github/helm/migration/values.yaml

      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: helm-values-migration
          path: .github/helm/migration/values.yaml
          retention-days: 1


  helm-CD-migration:
    name: K8s Deploy Migration
    runs-on: ubuntu-latest
    environment: 'develop'
    needs: [setup-config, prepare-helm-replacements]
    permissions:
      id-token: write
      contents: read
    env:
      CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
      CLUSTER_NAME: '${{ needs.setup-config.outputs.CLUSTER_NAME }}'
      ENV: '${{ needs.setup-config.outputs.ENV }}'
    steps:
      - uses: actions/checkout@v4
        name: Checkout
        with:
          ref: '${{ inputs.git_ref }}'
          fetch-depth: 0

      - name: configure
        uses: orbitspot/actions/.github/actions/kubernetes-auth@fix-npm-ci
        with:
          aws_account_number: '${{ vars.AWS_ACCOUNT_NUMBER }}'
          aws_role_name: '${{ vars.AWS_ROLE_NAME }}'
          aws_region: '${{ env.CLUSTER_REGION }}'
          cluster_name: '${{ vars.CLUSTER_NAME }}'

      - name: helm-apply
        uses: orbitspot/actions/.github/actions/helm-deploy@fix-npm-ci
        with:
          aws_account_number: '${{ vars.AWS_ACCOUNT_NUMBER }}'
          aws_region: '${{ env.CLUSTER_REGION }}'
          namespace: '${{ github.event.repository.name }}'
          helm_values: helm-values-migration
          release: migration
          chart_name: orbitspot/orbitspot-terraform
          chart_version: 0.3.5
          sets: |
            --set environment=${{ env.ENV}} \
            --set region=${{ env.CLUSTER_REGION }} \
            --set 'containers[0].repository.image=${{ vars.AWS_ACCOUNT_NUMBER}}.dkr.ecr.${{ env.CLUSTER_REGION }}.amazonaws.com/migration-${{github.event.repository.name }}' \
            --set 'containers[0].repository.tag=${{ github.sha }}'
