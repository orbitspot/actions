name: Push node

on:
  workflow_call:
    inputs:
      module:
        required: true
        type: string
      grafana_tag:
        required: true
        type: string
      version:
        required: true
        type: string
      dockerfile_path:
        required: false
        type: string
        default: ''

concurrency:
    group: '${{ github.workflow }}-${{ github.ref }}'
    cancel-in-progress: true

jobs:
    # setup-config:
    #   name: Set Up Config
    #   runs-on: ubuntu-latest
    #   outputs:
    #     CLUSTER_REGION: '${{ steps.set-output.outputs.CLUSTER_REGION }}'
    #     CLUSTER_NAME: '${{ steps.set-output.outputs.CLUSTER_NAME }}'
    #     ACM_ARN: '${{ steps.set-output.outputs.ACM_ARN }}'
    #     ENV: '${{ steps.set-output.outputs.ENV }}'
    #   steps:
    #     - name: Fetch devops variables
    #       id: set-output
    #       uses: orbitspot/actions/.github/actions/fetch-devops-variables@v18.8
    #       with:
    #         devops_config: '${{ vars._DEVOPS_CONFIG }}'
    #         branch: 'develop'

    building:
        name: Building
        runs-on: ubuntu-latest
        environment: develop
        # needs: [setup-config]
        permissions:
            id-token: write
            contents: read
        steps:
            # - name: Authenticate
            #   uses: orbitspot/actions/.github/actions/code-artifact-authenticate@v18.8
            #   with:
            #       aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
            #       aws_role_name: ${{ vars.AWS_ROLE_NAME }}
            #       aws_region: 'us-east-1'
            
            # - name: Set up Node.js
            #   uses: actions/setup-node@v4
            #   with:
            #       node-version: '20'

            # - name: Bash Co Login
            #   run: |
            #       bash co_login_commands.txt
        
            - uses: actions/checkout@v4
              name: Checkout
              with:
                  repository: 'orbitspot/actions'
                  ref: fix-variable-fetch-frontend
                  path: code
        
            # - name: Cache dependences
            #   uses: actions/cache@v4
            #   with:
            #       path: ~/.npm
            #       key: deps-node-modules-${{ hashFiles('**/yarn.lock') }}
        
            - name: Install Yarn
              run: npm install -g yarn
            
            # - name: Fetch fronted variables
            #   uses: orbitspot/actions/.github/actions/fetch-frontend-variables@fix-variable-fetch-frontend
            #   with:
            #     frontend_config: '${{ vars._FRONTEND_CONFIG }}'
            #     branch: 'develop'
            #     variables_json: '${{ toJson(vars) }}'
            #     secrets_json: '${{ toJson(secrets) }}'

            - name: Fetch fronted variables
              env:
                frontend_config: ${{ vars._FRONTEND_CONFIG }}
                branch: 'develop'
                variables_json: ${{ toJson(vars) }}
                secrets_json: ${{ toJson(secrets) }}
              run: |
                pip install pyyaml
                python code/.github/scripts/generate-environment-frontend.py
                cat .env
  
            - name: Yarn Building
              shell: bash
              run: |
                echo 'PUBLIC_PATH="https://${{ vars.HOST_MF }}/"' >> .env
                cat .env
                yarn
                yarn build
        
            - name: Zip Docker Content
              shell: bash
              run: |
                  mkdir -p building
                  mv build building/build
                  mv package.json building/package.json
                  sudo apt install zip
                  zip -r building/node_modules.zip node_modules

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: building
                  path: building
                  retention-days: 1

    # generate-docker:
    #     name: Docker Build
    #     runs-on: ubuntu-latest
    #     environment: develop
    #     needs: [setup-config, building]
    #     permissions:
    #         id-token: write
    #         contents: read
    #     env:
    #       CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
    #     steps:
    #       - name: Authenticate
    #         uses: orbitspot/actions/.github/actions/code-artifact-authenticate@v18.8
    #         with:
    #           aws_account_number: '${{ vars.AWS_ACCOUNT_NUMBER }}'
    #           aws_role_name: '${{ vars.AWS_ROLE_NAME }}'
    #           aws_region: us-east-1
  
    #       - name: Download Dockerfile from S3
    #         if: ${{ inputs.dockerfile_path == ''}}
    #         run: |
    #           aws s3 sync s3://devops.orbitspot.com/build-github-actions/v1/deploy/frontend .

    #       - name: Copy Dockerfile from original repository
    #         if: ${{ inputs.dockerfile_path != '' }}
    #         run: |
    #           mv ${{ inputs.dockerfile_path }} Dockerfile

    #       - name: docker-build
    #         uses: orbitspot/actions/.github/actions/docker@v1
    #         with:
    #             aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
    #             aws_role_name: ${{ vars.AWS_ROLE_NAME }}
    #             aws_region: ${{ env.CLUSTER_REGION }}
    #             content: "building"
    #             image: ${{ github.event.repository.name }}
    #             tag: ${{ github.sha }}

    # create-service-account-role:
    #     name: Creating Aws Resources
    #     runs-on: ubuntu-latest
    #     environment: develop
    #     needs: [setup-config, building]
    #     permissions:
    #         id-token: write
    #         contents: read
    #     env:
    #       CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
    #       CLUSTER_NAME: '${{ needs.setup-config.outputs.CLUSTER_NAME }}'
    #       ENV: '${{ needs.setup-config.outputs.ENV }}'
    #     steps:
    #         - name: create-role
    #           uses: orbitspot/actions/.github/actions/create-role-service-account@v18.8
    #           with:
    #               role: "${{ github.event.repository.name }}-${{ env.ENV }}"
    #               namespace: ${{ github.event.repository.name }}
    #               service_account_name: "application-permission"
    #               aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
    #               aws_role_name: ${{ vars.AWS_ROLE_NAME }}
    #               aws_region: ${{ vars._AWS_REGION }}
    #               policy: ${{ vars._POLICY_JSON }}

    #         - name: create-namespace
    #           uses: orbitspot/actions/.github/actions/create-namespace-and-service-account@v18.8
    #           with:
    #               aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
    #               aws_role_name: ${{ vars.AWS_ROLE_NAME }}
    #               aws_region: ${{ env.CLUSTER_REGION }}
    #               cluster_name: ${{ env.CLUSTER_NAME }}
    #               namespace: ${{ github.event.repository.name }}
    #               role_arn: "arn:aws:iam::${{ vars.AWS_ACCOUNT_NUMBER }}:role/${{ github.event.repository.name }}-${{ env.ENV }}"
    #               service_account_name: "application-permission"

    # helm-deploy:
    #     name: K8s Deploy
    #     runs-on: ubuntu-latest
    #     environment: develop
    #     needs: [ setup-config, create-service-account-role, generate-docker ]
    #     permissions:
    #         id-token: write
    #         contents: read
    #     env:
    #       CLUSTER_REGION: '${{ needs.setup-config.outputs.CLUSTER_REGION }}'
    #       CLUSTER_NAME: '${{ needs.setup-config.outputs.CLUSTER_NAME }}'
    #       ACM_ARN: '${{ needs.setup-config.outputs.ACM_ARN }}'
    #       ENV: '${{ needs.setup-config.outputs.ENV }}'
    #     steps:
    #         - uses: actions/checkout@v4
    #           name: Checkout
    #           with:
    #               ref: develop
    #               fetch-depth: 0

    #         - name: configure
    #           uses: orbitspot/actions/.github/actions/kubernetes-auth@v18.8
    #           with:
    #               aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
    #               aws_role_name: ${{ vars.AWS_ROLE_NAME }}
    #               aws_region: ${{ env.CLUSTER_REGION }}
    #               cluster_name: ${{ env.CLUSTER_NAME }}

    #         - name: Download Helm from S3
    #           run: |
    #             aws s3 cp s3://devops.orbitspot.com/build-github-actions/v1/deploy/frontend/values.yaml values.yaml
    #             sed -i 's/<GRAFANA-TAG>/${{ inputs.grafana_tag }}/g' values.yaml
    #             mkdir -p .github/helm/nginx
    #             mv values.yaml .github/helm/nginx/values.yaml
    #             cat .github/helm/nginx/values.yaml
            
    #         - name: upload
    #           uses: actions/upload-artifact@v4
    #           with:
    #               name: helm-values
    #               path: .github/helm/nginx/values.yaml
    #               retention-days: 1

    #         - name: helm-apply
    #           uses: orbitspot/actions/.github/actions/helm-deploy@v18.8
    #           with:
    #               aws_account_number: ${{ vars.AWS_ACCOUNT_NUMBER }}
    #               aws_region: ${{ env.CLUSTER_REGION }}
    #               namespace: ${{ github.event.repository.name }}
    #               helm_values: helm-values
    #               release: nginx
    #               chart_name: orbitspot/orbitspot-front-nginx
    #               chart_version: 0.0.0
    #               sets: |
    #                   --set environment=${{ env.ENV }} \
    #                   --set region=${{ env.CLUSTER_REGION }} \
    #                   --set 'containers[0].repository.image=${{ vars.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ env.CLUSTER_REGION }}.amazonaws.com/${{ github.event.repository.name }}' \
    #                   --set 'containers[0].repository.tag=${{ github.sha }}' \
    #                   --set ingress.annotations.acm=${{ env.ACM_ARN }} \
    #                   --set ingress.rules[0].host=${{ vars.HOST_MF }}