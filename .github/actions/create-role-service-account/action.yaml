name: 'Create Service Account Role'
description: 'create service account role'
inputs:
  role:
    description: 'Aws role to be created'
    required: true
  cluster_name:
    description: 'Cluster OIDC issuer URL without https'
    required: true
  namespace:
    description: 'Application name'
    required: true
  service_account_name:
    description: 'Service Account name'
    required: true

  aws_account_number:
    description: 'Account Number'
    required: true
  aws_role_name:
    description: 'Aws role with polices to deploy'
    required: true
  aws_region:
    description: 'Aws region'
    required: true

  policy:
    description: 'Policy Role'
    required: true

  policy_name:
    description: 'Policy Role'
    required: true
    default: 'default'

runs:
  using: composite
  steps:

  - name: configure aws credentials
    uses: aws-actions/configure-aws-credentials@v4
    with:
      role-to-assume: arn:aws:iam::${{ inputs.aws_account_number }}:role/${{ inputs.aws_role_name }}
      role-session-name: ${{ inputs.aws_role_name }}
      aws-region: ${{ inputs.aws_region }}

  - name: Verificar se a role existe
    shell: bash
    id: check-role
    run: |
        if aws iam get-role --role-name ${{ inputs.role }}; then
          echo "role_exists=true" >> $GITHUB_OUTPUT
        else
          echo "role_exists=false" >> $GITHUB_OUTPUT
        fi

  # - name: Buscar OIDC provider
  #   shell: bash
  #   run: |
  #     INPUT_STRING=${{ inputs.role }}
  #     echo "env - $INPUT_STRING"
  #     ENVIRONMENT="${INPUT_STRING##*-}"
  #     AWS_REGION="us-east-1"

  #     OIDC_PROVIDER=$(aws secretsmanager get-secret-value \
  #         --secret-id "oidc_provider/$ENVIRONMENT" \
  #         --region "$AWS_REGION" \
  #         --query SecretString \
  #         --output text)

  #     if [ $? -ne 0 ]; then
  #         echo "Failed to retrieve secret"
  #         exit 1
  #     fi

  #     export OIDC_PROVIDER
  #     echo "Secret fetched successfully."

  - name: Criar role
    shell: bash
    if: steps.check-role.outputs.role_exists == 'false'
    run: |
      OIDC_PROVIDER="$(aws eks describe-cluster --name ${{ inputs.cluster_name }} --query "cluster.identity.oidc.issuer" --output text | sed 's|https://||')"
      aws iam create-role --role-name "${{ inputs.role }}" --assume-role-policy-document '{
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": {
            "Federated": "arn:aws:iam::${{ inputs.aws_account_number }}:oidc-provider/'"$OIDC_PROVIDER"'"
          },
          "Action": "sts:AssumeRoleWithWebIdentity",
          "Condition": {
            "StringEquals": {
              "'"$OIDC_PROVIDER"':sub": "system:serviceaccount:${{ inputs.namespace }}:${{ inputs.service_account_name }}"
              }
            }
          }
        ]
      }'

  - name: Atualizar Role
    shell: bash
    if: steps.check-role.outputs.role_exists == 'true'
    run: |
      OIDC_PROVIDER="$(aws eks describe-cluster --name ${{ inputs.cluster_name }} --query "cluster.identity.oidc.issuer" --output text | sed 's|https://||')"
      aws iam update-assume-role-policy --role-name "${{ inputs.role }}" --policy-document '{
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": {
            "Federated": "arn:aws:iam::${{ inputs.aws_account_number }}:oidc-provider/'"$OIDC_PROVIDER"'"
          },
          "Action": "sts:AssumeRoleWithWebIdentity",
          "Condition": {
            "StringEquals": {
              "'"$OIDC_PROVIDER"':sub": "system:serviceaccount:${{ inputs.namespace }}:${{ inputs.service_account_name }}"
              }
            }
          }
        ]
      }'

  - name: Adicionar Policy Ã  Role
    shell: bash
    run: |
      aws iam put-role-policy --role-name "${{ inputs.role }}" --policy-name "${{ inputs.policy_name }}" --policy-document '${{ inputs.policy }}'


