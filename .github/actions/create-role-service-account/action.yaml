name: 'Create Service Account Role'
description: 'create service account role'
inputs:
  role:
    description: 'Aws role to be created'
    required: true
  namespace:
    description: 'Application name'
    required: true
  service_account_name:
    description: 'Service Account name'
    required: true
  policy:
    description: 'Policy'
    required: false
  policy_name:
    description: 'Policy Role'
    required: false
    default: 'default'

runs:
  using: composite
  steps:
  - name: configure aws credentials
    uses: aws-actions/configure-aws-credentials@v4
    with:
      role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:role/${{ env.AWS_ROLE_NAME }}
      role-session-name: ${{ env.AWS_ROLE_NAME }}
      aws-region: ${{ env.AWS_REGION }}

  - name: Verificar se a role existe
    shell: bash
    id: check-role
    run: |
        if aws iam get-role --role-name ${{ inputs.role }}; then
          echo "role_exists=true" >> $GITHUB_OUTPUT
        else
          echo "role_exists=false" >> $GITHUB_OUTPUT
        fi

  - name: Buscando OIDC Provider
    shell: bash
    run: |
      INPUT_STRING=${{ inputs.role }}
      ENVIRONMENT="${INPUT_STRING##*-}"
      AWS_REGION="us-east-1"

      echo "OIDC_PROVIDER=$(aws secretsmanager get-secret-value \
          --secret-id "oidc_provider/$ENVIRONMENT" \
          --region "$AWS_REGION" \
          --query SecretString \
          --output text)" >> $GITHUB_ENV

  - name: Criar role
    shell: bash
    if: steps.check-role.outputs.role_exists == 'false'
    run: |
      aws iam create-role --role-name "${{ inputs.role }}" --assume-role-policy-document '{
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": {
            "Federated": "arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:oidc-provider/'"$OIDC_PROVIDER"'"
          },
          "Action": "sts:AssumeRoleWithWebIdentity",
          "Condition": {
            "StringEquals": {
              "'"$OIDC_PROVIDER"':sub": "system:serviceaccount:${{ inputs.namespace }}:${{ inputs.service_account_name }}"
              }
            }
          }
        ]
      }'

  - name: Atualizar Role
    shell: bash
    if: steps.check-role.outputs.role_exists == 'true'
    run: |
      aws iam update-assume-role-policy --role-name "${{ inputs.role }}" --policy-document '{
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": {
            "Federated": "arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:oidc-provider/'"$OIDC_PROVIDER"'"
          },
          "Action": "sts:AssumeRoleWithWebIdentity",
          "Condition": {
            "StringEquals": {
              "'"$OIDC_PROVIDER"':sub": "system:serviceaccount:${{ inputs.namespace }}:${{ inputs.service_account_name }}"
              }
            }
          }
        ]
      }'

  - name: Adicionar Policy Ã  Role
    if: inputs.policy != ''
    shell: bash
    run: |
      aws iam put-role-policy --role-name "${{ inputs.role }}" --policy-name "${{ inputs.policy_name }}" --policy-document '${{ inputs.policy }}'


