name: 'Devops Variables'
description: 'fetch devops variables'
inputs:
  # devops_config_develop:
  #   description: 'devops config'
  #   required: true
  # devops_config_homolog:
  #   description: 'devops config'
  #   required: true
  # devops_config_master:
  devops_config:
    description: 'devops config'
    required: true
  branch:
    description: 'branch'
    required: true
outputs:
  CLUSTER_REGION:
    description: 'cluster region'
    value: ${{ steps.set-output.outputs.CLUSTER_REGION }}
  CLUSTER_NAME:
    description: 'cluster region'
    value: ${{ steps.set-output.outputs.CLUSTER_NAME }}
  ENV:
    description: 'cluster region'
    value: ${{ steps.set-output.outputs.ENV }}
runs:
  # using: composite
  # steps:
  # - name: Determine configuration variable
  #   shell: bash
  #   run: |
  #     if [[ "${{ inputs.branch }}" == "develop" ]]; then 
  #       echo 'CONFIG=${{ inputs.devops_config_develop }}' >> $GITHUB_ENV
  #     elif [[ "${{ inputs.branch }}" == "homolog" ]]; then
  #       echo "CONFIG=${{ inputs.devops_config_homolog }}" >> $GITHUB_ENV
  #     elif [[ "${{ inputs.branch }}" == "master" ]]; then
  #       echo "CONFIG=${{ inputs.devops_config_master }}" >> $GITHUB_ENV
  #     fi
  using: composite
  steps:
  - name: Determine configuration variable
    id: set-output
    shell: python
    run: |
      import json
      import os

      # Get input from environment variable
      devops_config_str = """${{ inputs.devops_config }}"""

      # Convert JSON string to dictionary
      try:
          devops_config = json.loads(devops_config_str)
          print("Parsed GitHub Vars:", json.dumps(devops_config, indent=2))
      except json.JSONDecodeError as e:
          print(f"Error decoding JSON: {e}")
          devops_config = {}

      # Example usage
      if "CLUSTER_REGION" in devops_config:
        print(f"Value for 'CLUSTER_REGION': {devops_config['CLUSTER_REGION']}")
      output_file = os.getenv('GITHUB_OUTPUT')
      with open(output_file, 'a') as f:
        for key, value in devops_config.items():
          f.write(f"{key}={value}\n")

  # - name: Set config as output
  #   shell: bash
  #   id: set-output
  #   run: |
  #     keys=$(echo $CONFIG | jq -r 'keys_unsorted[]')
  #     for key in $keys; do
  #       value=$(echo $CONFIG | jq -r ".\"$key\"")
  #       echo "$key=$value" >> $GITHUB_OUTPUT
  #     done