name: 'Generate Docker Image on Ecr'
description: 'Create and publish docker image'
inputs:
  content:
    description: 'Content to download'
    required: false
  image:
    description: 'Image Name'
    required: true
  tag:
    description: 'Image Tag'
    required: true
  before_building:
    description: 'Before image callback'
    required: false
  build_args: 
    description: 'Building docker args'
    required: false

runs:
  using: composite
  steps:
  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v3

  - name: Login to Amazon ECR
    id: login-ecr
    uses: aws-actions/amazon-ecr-login@v2
    env:
      AWS_REGION: ${{ env.CLUSTER_REGION }}

  - name: Ensure ECR Repository exists
    shell: bash
    env:
      AWS_REGION: ${{ env.CLUSTER_REGION }}
      AWS_ACCOUNT: ${{ vars.AWS_ACCOUNT_NUMBER }}
    run: |
      set -e
      repo_name="${{ inputs.image }}"
      echo "🔎 Verificando se o repositório $repo_name existe..."
      if ! aws ecr describe-repositories --repository-names "$repo_name" --region "$AWS_REGION" >/dev/null 2>&1; then
        echo "⚠️ Repositório $repo_name não encontrado. Criando..."
        aws ecr create-repository --repository-name "$repo_name" --region "$AWS_REGION"
        echo "✅ Repositório $repo_name criado."

        echo "📜 Criando lifecycle policy para manter apenas as últimas 5 imagens..."
        cat > policy.json <<'EOF'
        {
          "rules": [
            {
              "rulePriority": 1,
              "description": "Mantenha somente as últimas 5 imagens",
              "selection": {
                "tagStatus": "any",
                "countType": "imageCountMoreThan",
                "countNumber": 5
              },
              "action": {
                "type": "expire"
              }
            }
          ]
        }
        EOF
        aws ecr put-lifecycle-policy \
          --repository-name "$repo_name" \
          --lifecycle-policy-text file://policy.json \
          --region "$AWS_REGION"
        echo "✅ Lifecycle policy aplicada ao repositório $repo_name."
      else
        echo "✅ Repositório $repo_name já existe."
      fi

  - name: Download Building files
    uses: actions/download-artifact@v4
    if: ${{ inputs.content != '' }}
    with:
        name: ${{ inputs.content }}
  
  - name: Before Image Building
    shell: bash
    if: ${{ inputs.before_building != '' }}
    run: ${{ inputs.before_building }}

  - name: "Building and pushing image"
    shell: bash
    run: |
      docker build -t ${{ inputs.image }}:${{ inputs.tag }} ${{ inputs.build_args }} .
      docker tag ${{ inputs.image }}:${{ inputs.tag }} ${{ steps.login-ecr.outputs.registry }}/${{ inputs.image }}:${{ inputs.tag }}
      docker push ${{ steps.login-ecr.outputs.registry }}/${{ inputs.image }}:${{ inputs.tag }}
