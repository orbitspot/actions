name: 'Frontend Variables'
description: 'fetch frontend variables'
inputs:
  frontend_config:
    description: 'frontend config'
    required: true
  variables_json:
    description: 'json with environment variables'
    required: true
  secrets_json:
    description: 'json with environment secrets'
    required: true
  branch:
    description: 'branch'
    required: true

runs:
  using: composite
  steps:
  - name: Determine configuration variable
    shell: bash
    run: |
      echo 'config=${{ inputs.frontend_config }}' >> $GITHUB_ENV
      echo 'branch=${{ inputs.branch }}' >> $GITHUB_ENV
      echo 'variables=${{ inputs.variables_json }}' >> $GITHUB_ENV
      echo 'secrets=${{ inputs.secrets_json }}' >> $GITHUB_ENV
  
  - name: Set config as output
    shell: bash
    id: set-output
    run: |
      keys=$(echo "$config" | jq -r --arg branch "$branch" '.[$branch] | keys_unsorted[]')
      for key in $keys; do
        value=$(echo "$config" | jq -r --arg branch "$branch" --arg key "$key" '.[$branch][$key]')
        echo "$key" "$value"
        printf '%s="%s"\n' $key $value >> .env
      done

      jq -r 'to_entries[] | @sh "\(.key)=\(.value)"' variables | while read -r line; do
        key="${line%%=*}"
        value="${line#*=}"
        printf '%s="%s"\n' "$key" "$value" >> .env
      done

      if [ -n secrets ] && echo secrets | jq -e 'type == "object"' > /dev/null; then
        echo secrets | jq -r 'to_entries[] | @sh "\(.key)=\(.value)"' | while read -r line; do
          key="${line%%=*}"
          value="${line#*=}"
          printf '%s="%s"\n' "$key" "$value" >> .env
        done
      else
        echo "No secrets to write to .env"
      fi

      cat .env
