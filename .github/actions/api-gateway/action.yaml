name: 'Terraform Init'
description: 'terraform init commands'
inputs:
  terraform_bucket_name:
    description: 'Bucket'
    required: true
    default: 'terraform-orbit'
  tag:
    description: 'tag'
    required: true
  apply_response_script:
    description: 'Apply new scripts on integration'
    required: false
    default: 'true'

runs:
  using: composite
  steps:
  - name: configure aws credentials
    uses: aws-actions/configure-aws-credentials@v4
    with:
      role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_NUMBER }}:role/${{ env.AWS_ROLE_NAME }}
      role-session-name: ${{ env.AWS_ROLE_NAME }}
      aws-region: ${{ env.AWS_REGION }}

  - name: Checkout code
    uses: actions/checkout@v4
    with:
        repository: 'orbitspot/actions'
        path: orbitspot-actions
        ref: '${{ inputs.tag }}'

  - name: Terraform Init
    shell: bash
    run: |
      cd orbitspot-actions/terraform/api-gateway
      terraform init -backend-config=bucket=${{ inputs.terraform_bucket_name }} -backend-config=key=api-gateway/${{ github.event.repository.name }}/${{ github.ref_name }}.tfstate -backend-config=region=us-east-1 -no-color

  - name: Delete resource if it exists
    shell: bash
    run: |
      cd orbitspot-actions/terraform/api-gateway
      terraform destroy -auto-approve
      
  - name: Terraform Plan
    shell: bash
    env:
      TF_VAR_apply_response_script: ${{ inputs.apply_response_script }}
    run: |
      cd orbitspot-actions/terraform/api-gateway
      terraform plan -no-color

  - name: Terraform Apply
    shell: bash
    env:
      TF_VAR_apply_response_script: ${{ inputs.apply_response_script }}
    run: |
      cd orbitspot-actions/terraform/api-gateway
      terraform apply -auto-approve -no-color

